""" Rules to build Docker images via `buildkit`.

"""

def buildkit_image(
    name: str,
    dockerfile: str,
    srcs: list = [],
    repository: str = "",
    visibility: list = [],
    tags: list = [],
    add_latest_tag = True,
    add_src_tag = True,
    aliases: list = [],
):
    image_repo_prefix = CONFIG.BUILDKIT.IMAGE_REPOSITORY_PREFIX
    if image_repo_prefix[-1] != "/":
            image_repo_prefix += "/"

    image_generated_repo_offset = int(CONFIG.BUILDKIT.IMAGE_GENERATED_PKG_OFFSET)
    if not repository:
        repository = image_repo_prefix + "/".join(package_name().split("/")[image_generated_repo_offset:]) + f"/{name}"

    # build context
    build_context_rule=tarball(
        name = f"_{name}#build_context",
        srcs = [dockerfile] + srcs,
        visibility = visibility,
    )

    # repository
    repository_rule=genrule(
        name = f"_{name}#repository",
        outs = [f"_{name}#repository"],
        cmd = f'echo "{repository}" > $OUTS',
        visibility = visibility,
        labels = ["buildkit-repository", "repository"],
    )

    # tags
    tags_rule=_image_tags_rule(
        name,
        build_context_rule,
        tags,
        add_latest_tag,
        add_src_tag,
        visibility,
    )

    # fqn_tag
    fqn_tags_rule=genrule(
        name = f"{name}#fqn_tags",
        srcs = {
            "repository": [repository_rule],
            "tags": [tags_rule],
        },
        outs = [f"_{name}#fqn_tags"],
        cmd = """
repo=$(cat $SRCS_REPOSITORY)
sed "s#^#$repo:#" $SRCS_TAGS > $OUTS
        """,
        visibility = visibility,
    )

    package_name=package_name().replace("/", "_")

    please_buildkit_tool = CONFIG.BUILDKIT.TOOL
    please_buildkit_worker = CONFIG.BUILDKIT.WORKER_TOOL
    image_build_rule=genrule(
        name = f"_{name}#build",
        srcs = {
            "srcs": srcs,
            "dockerfile": [dockerfile],
            "fqn_tags": [fqn_tags_rule],
        },
        outs = {
            "image": [f"{package_name}_{name}.tar"],
        },
        sandbox = False,
        tools = [please_buildkit_worker],
        cmd = f"""$(worker {please_buildkit_worker}) \\
            --image_out="{package_name}_{name}.tar" \\
            --fqn_tags_file="$(location {fqn_tags_rule})" \\
            --dockerfile="$(location {dockerfile})"
        """,
        visibility = visibility,
    )

    img = filegroup(
        name = name,
        srcs = [f"{image_build_rule}|image"],
        visibility = visibility,
        labels = ["buildkit-image", "image"],
    )

    # Support SBOMs
    sbom_tool = CONFIG.BUILDKIT.SBOM_TOOL
    sbom=genrule(
        name = f"{name}_sbom",
        srcs = [img],
        tools = [sbom_tool],
        outs = [f"{name}_sbom.json"],
        cmd = f"""
set -Eeuo pipefail
$TOOL docker-archive:$SRCS -o json --file $OUTS
        """,
        visibility = visibility,
    )

    crane_tool = CONFIG.BUILDKIT.CRANE_TOOL
    sh_cmd(
        name = f"{name}_push",
        data = [img, please_buildkit_tool, fqn_tags_rule, crane_tool],
        shell = "/usr/bin/env bash",
        cmd = f"""
set -Eeuo pipefail
reporoot="\\\\$(./pleasew query reporoot)"
"\\\$reporoot/$(out_exe {please_buildkit_tool})" push \\\\
    --crane_tool="\\\$reporoot/$(out_exe {crane_tool})" \\\\
    --img_tar_path="\\\$reporoot/$(out_location {img})" \\\\
    --fqn_tags_path="\\\$reporoot/$(out_location {fqn_tags_rule})" \\\\
    "\\\$@"
        """,
        labels = ["image-push"],
        visibility = visibility,
    )

    # aliases
    aliases += [repository]
    aliases_flags=[f"--aliases={a}" for a in aliases]

    sh_cmd(
        name = tag(name, "replace"),
        data = [please_buildkit_tool, fqn_tags_rule],
        shell = "/usr/bin/env bash",
        cmd = f"""
set -Eeuo pipefail
reporoot="\\\\$(./pleasew query reporoot)"
"\\\$reporoot/$(out_exe {please_buildkit_tool})" replace \\\\
    {aliases_flags} \\\\
    --fqn_tags_path="\\\$reporoot/$(out_location {fqn_tags_rule})" \\\\
    --file_path="\\\$1" \\\\
    \\\${{2:-}}
        """,
        labels = ["image-replace"],
        visibility = visibility,
    )

    return img

def buildkit_image_mirror(
    name: str,
    repo: str,
    digest: str,
    tags: list = [],
    aliases: list = [],
    visibility: list = [],
    labels: list = [],
):

    dockerfile=genrule(
        name = f"_{name}#dockerfile",
        outs = [f"_{name}#dockerfile"],
        cmd = f'echo "FROM {repo}@{digest}" > $OUTS',
    )

    return buildkit_image(
        name = name,
        dockerfile = dockerfile,
        visibility = visibility,
        aliases = [repo] + aliases,
        tags = tags,
    )

def buildkit_distroless_image(
    name: str,
    srcs: list = [],
    entrypoint: list = [],
    cmd: list = [],
    user: str = "65535",
    visibility: list = [],
    tags: list = [],
    add_latest_tag = True,
    add_src_tag = True,
    aliases: list = [],
):
    cmd_entrypoint=json(entrypoint)
    cmd_json=json(cmd)

    distroless_default_base = CONFIG.BUILDKIT.DISTROLESS_DEFAULT_BASE

    dockerfile=genrule(
        name = tag(name, "dockerfile"),
        srcs = srcs,
        outs = [f"_{name}#dockerfile"],
        cmd = f"""
echo "FROM {distroless_default_base}" >> $OUTS

entrypoint="{cmd_entrypoint}"
for src in $SRCS; do
    echo "COPY $src /app/$src" >> $OUTS
    if [ "$entrypoint" = "[]" ] && [ -x "$src" ]; then
        entrypoint="[\\\"/app/${{src}}\\\"]"
    fi
done

echo "ENTRYPOINT $entrypoint" >> $OUTS
echo 'CMD {cmd_json}' >> $OUTS
echo "USER {user}" >> $OUTS
        """,
    )

    return buildkit_image(
        name = name,
        dockerfile = dockerfile,
        srcs = srcs,
        visibility = visibility,
        aliases = aliases,
        tags = tags,
        add_latest_tag = add_latest_tag,
        add_src_tag = add_src_tag,
    )

def _image_tags_rule(
    name: str,
    build_context_rule: str,
    tags: list,
    add_latest_tag: bool,
    add_src_tag: bool,
    visibility: list,
):
    tag_rule_cmds = []
    tag_rule_srcs = {}
    for img_tag in tags:
        tag_rule_cmds += [f'echo "{img_tag}" >> $OUTS']

    if add_latest_tag:
        tag_rule_cmds += ['echo "latest" >> $OUTS']

    if add_src_tag:
        tag_rule_srcs["context"] = [build_context_rule]
        tag_rule_cmds += ['echo "srcsha256-$(sha256sum $SRCS_CONTEXT | cut -f1 -d" ")" >> $OUTS']

    return genrule(
        name = f"_{name}#tags",
        outs = [f"_{name}#tags"],
        srcs = tag_rule_srcs,
        cmd = '\n'.join(tag_rule_cmds),
        visibility = visibility,
        labels = ["buildkit-tags", "tags"],
    )

def _buildkit_tool():
    default_buildkit_tools = [
        "///buildkit//third_party/binary:please_buildkit",
        "//third_party/binary:please_buildkit",
    ]
    if CONFIG.BUILDKIT.TOOL not in default_buildkit_tools and CONFIG.BUILDKIT.TOOL_VERSION:
        fail(f"buildkit.ToolVersion should only be set when buildkit.Tool is the default value (currently: '{CONFIG.TERRAFORM.TOOL}').")

    buildkit_tool_rule=""
    if CONFIG.BUILDKIT.TOOL_VERSION:
        buildkit_tool_rule=remote_file(
            name = "please_buildkit",
            url = f"https://github.com/VJftw/please-buildkit/releases/download/{CONFIG.BUILDKIT.TOOL_VERSION}/please_buildkit",
            visibility = ["PUBLIC"],
            binary = True,
        )

    if CONFIG.BUILDKIT.TOOL:
        buildkit_tool_rule=CONFIG.BUILDKIT.TOOL

    buildctl_tool=CONFIG.BUILDKIT.BUILDCTL_TOOL
    sh_cmd(
        name = "please_buildkit_worker",
        data = [
            buildkit_tool_rule,
            buildctl_tool,
        ],
        shell = "/usr/bin/env bash",
        cmd = f"""
reporoot="\\\\$(pwd | sed 's#/plz-out/.*##g')"
"\\\\$reporoot/$(out_exe {buildkit_tool_rule})" \\
    worker \\
    --buildctl_binary="\\\\$reporoot/$(out_exe {buildctl_tool})" \\
    "\\\\$@"
        """,
        visibility = ["PUBLIC"],
        )
